import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";

import { api } from "~/utils/api";
import { Button } from "./components/button";
import { Input } from "./components/input";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { InputProps } from "./components/input/props";

const Home: NextPage = () => {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const formSubmit = (data: any) => {
    console.log({ data });
  };

  const generateQRCodeSchema = z.object({
    name: z.string().nonempty("This field cannot be empety"),
    linkedin: z
      .string()
      .nonempty("This field cannot be empety")
      .url("You must provide a valid linkedin url"),
    github: z
      .string()
      .nonempty("This field cannot be empety")
      .url("You must provide a valid github url"),
  });

  type GenerateQRCodeInputs = {
    name: string;
    linkedin: string;
    github: string;
  };

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<GenerateQRCodeInputs>({
    resolver: zodResolver(generateQRCodeSchema),
  });

  const inputs: InputProps[] = [
    {
      name: "Name",
      register,
      placeholder: "Nome",
      error: errors.name?.message,
    },
    {
      name: "Linkedin",
      register,
      placeholder: "Linkedin URL",
      error: errors.linkedin?.message,
    },
    {
      name: "Github",
      register,
      placeholder: "Github URL",
      error: errors.github?.message,
    },
  ];

  return (
    <>
      <Head>
        <title>Jao QRCode</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-full w-full flex-col items-center p-2 pt-10">
        <form
          onSubmit={handleSubmit(formSubmit)}
          className="flex w-full max-w-4xl flex-col gap-8"
        >
          <h1 className="ml-[0%] xs:ml-[15%]">QR Code Image Generator</h1>
          <div className="flex w-full flex-col gap-4">
            {inputs.map((input) => {
              return (
                <Input
                  key={input.name}
                  name={input.name}
                  register={input.register}
                  placeholder={input.placeholder}
                  error={input.error}
                />
              );
            })}
          </div>
          <Button>Generate Image</Button>
        </form>
      </main>
    </>
  );
};

export default Home;

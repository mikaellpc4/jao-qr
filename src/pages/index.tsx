import { type NextPage } from "next";
import Head from "next/head";

import { Button } from "../components/button";
import { Input } from "../components/input";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import type { InputProps } from "../components/input/props";
import { useState } from "react";
import QRCode from "react-qr-code";
import { api } from "~/utils/api";
import { Loading } from "~/components/loading";

const Home: NextPage = () => {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });
  //
  type GenerateQRCodeInputs = {
    name: string;
    linkedin: string;
    github: string;
  };

  type ProfileQRProps = GenerateQRCodeInputs & {
    profileLink: string;
  };

  const { mutateAsync: createEmployee, isLoading } =
    api.employee.create.useMutation();
  const [profileQR, setProfileQR] = useState<ProfileQRProps | null>(null);

  const generateQRCodeSchema = z.object({
    name: z.string().nonempty("This field cannot be empety"),
    linkedin: z
      .string()
      .nonempty("This field cannot be empety")
      .url("You must provide a valid linkedin url")
      .includes("linkedin.com", {
        message: "You must provide a valid linkedin url",
      }),
    github: z
      .string()
      .nonempty("This field cannot be empety")
      .url("You must provide a valid github url")
      .includes("github.com", {
        message: "You must provide a valid github url",
      }),
  });

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<GenerateQRCodeInputs>({
    resolver: zodResolver(generateQRCodeSchema),
  });

  const formSubmit = async (data: GenerateQRCodeInputs): Promise<void> => {
    const { name, linkedin, github } = data;
    const newEmployee = await createEmployee({
      name,
      linkedin,
      github,
    });
    const newEmployeeId = newEmployee.id;
    setProfileQR({
      ...data,
      profileLink: `${window.location.origin}/employee/${newEmployeeId}`,
    });
  };

  const inputs: InputProps[] = [
    {
      name: "name",
      displayName: "Name",
      register,
      placeholder: "Name",
      error: errors.name?.message,
    },
    {
      name: "linkedin",
      displayName: "Linkedin",
      register,
      placeholder: "Linkedin URL",
      error: errors.linkedin?.message,
    },
    {
      name: "github",
      displayName: "Github",
      register,
      placeholder: "Github URL",
      error: errors.github?.message,
    },
  ];

  return (
    <>
      <Head>
        <title>Jao QRCode</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-full w-full flex-col items-center gap-20 p-2 pt-10">
        <form
          onSubmit={handleSubmit(formSubmit)}
          className="flex w-full max-w-4xl flex-col gap-8"
        >
          <h1 className="ml-[0%] xs:ml-[15%]">QR Code Image Generator</h1>
          <div className="flex w-full flex-col gap-10">
            {inputs.map((input) => {
              return (
                <Input
                  key={input.name}
                  name={input.name}
                  displayName={input.displayName}
                  register={input.register}
                  placeholder={input.placeholder}
                  error={input.error}
                />
              );
            })}
          </div>
          <Button>{isLoading ? <Loading /> : "Generate Image"}</Button>
        </form>
        {profileQR && (
          <div className="flex flex-col items-center gap-4">
            <a
              className="text-blue-600 hover:underline dark:text-blue-500"
              href={profileQR.profileLink}
              target="_blank"
            >
              <QRCode value={profileQR.profileLink} name="QRCode" />
            </a>
            <div className="flex flex-col items-center font-semibold">
              <p> {profileQR.name}</p>
              <p> {profileQR.github} </p>
              <p> {profileQR.linkedin} </p>
            </div>
          </div>
        )}
      </main>
    </>
  );
};

export default Home;
